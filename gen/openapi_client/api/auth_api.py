"""
    Wyze Auth API

    This spec describes the user authentication API for Wyze as it is used by ha-wyzeapi  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: joshua@mulliken.net
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.error_response import ErrorResponse
from openapi_client.model.inline_object import InlineObject
from openapi_client.model.inline_object2 import InlineObject2
from openapi_client.model.inline_response200 import InlineResponse200
from openapi_client.model.inline_response2001 import InlineResponse2001
from openapi_client.model.inline_response2002 import InlineResponse2002
from openapi_client.model.str_none_type import StrNoneType


class AuthApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __app_user_refresh_token_post(
            self,
            inline_object2,
            x_api_key="WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ",
            **kwargs
        ):
            """Refreshes the access_token using the refresh_token  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.app_user_refresh_token_post(inline_object2, x_api_key="WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ", async_req=True)
            >>> result = thread.get()

            Args:
                inline_object2 (InlineObject2):
                x_api_key (str): defaults to "WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ", must be one of ["WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2002
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['x_api_key'] = \
                x_api_key
            kwargs['inline_object2'] = \
                inline_object2
            return self.call_with_http_info(**kwargs)

        self.app_user_refresh_token_post = Endpoint(
            settings={
                'response_type': (InlineResponse2002,),
                'auth': [],
                'endpoint_path': '/app/user/refresh_token',
                'operation_id': 'app_user_refresh_token_post',
                'http_method': 'POST',
                'servers': [
                    {
                        'url': "https://api.wyzecam.com",
                        'description': "No description provided",
                    },
                ]
            },
            params_map={
                'all': [
                    'x_api_key',
                    'inline_object2',
                ],
                'required': [
                    'x_api_key',
                    'inline_object2',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_api_key':
                        (str,),
                    'inline_object2':
                        (InlineObject2,),
                },
                'attribute_map': {
                    'x_api_key': 'X-API-Key',
                },
                'location_map': {
                    'x_api_key': 'header',
                    'inline_object2': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__app_user_refresh_token_post
        )

        def __user_login_post(
            self,
            phone_id,
            inline_object,
            user_agent="wyze_android_2.19.14",
            x_api_key="WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ",
            **kwargs
        ):
            """Logs user into the system  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_login_post(phone_id, inline_object, user_agent="wyze_android_2.19.14", x_api_key="WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ", async_req=True)
            >>> result = thread.get()

            Args:
                phone_id (str):
                inline_object (InlineObject):
                user_agent (str): defaults to "wyze_android_2.19.14", must be one of ["wyze_android_2.19.14"]
                x_api_key (str): defaults to "WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ", must be one of ["WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse200
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['phone_id'] = \
                phone_id
            kwargs['user_agent'] = \
                user_agent
            kwargs['x_api_key'] = \
                x_api_key
            kwargs['inline_object'] = \
                inline_object
            return self.call_with_http_info(**kwargs)

        self.user_login_post = Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [],
                'endpoint_path': '/user/login',
                'operation_id': 'user_login_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'phone_id',
                    'user_agent',
                    'x_api_key',
                    'inline_object',
                ],
                'required': [
                    'phone_id',
                    'user_agent',
                    'x_api_key',
                    'inline_object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'phone_id':
                        (str,),
                    'user_agent':
                        (str,),
                    'x_api_key':
                        (str,),
                    'inline_object':
                        (InlineObject,),
                },
                'attribute_map': {
                    'phone_id': 'Phone-Id',
                    'user_agent': 'User-Agent',
                    'x_api_key': 'X-API-Key',
                },
                'location_map': {
                    'phone_id': 'header',
                    'user_agent': 'header',
                    'x_api_key': 'header',
                    'inline_object': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__user_login_post
        )

        def __user_login_send_sms_code_post(
            self,
            phone_id,
            session_id,
            user_id,
            user_agent="wyze_android_2.19.14",
            x_api_key="WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ",
            mfa_phone_type="Primary",
            **kwargs
        ):
            """Sends an SMS MFA Code to the user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_login_send_sms_code_post(phone_id, session_id, user_id, user_agent="wyze_android_2.19.14", x_api_key="WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ", mfa_phone_type="Primary", async_req=True)
            >>> result = thread.get()

            Args:
                phone_id (str):
                session_id (str, none_type):
                user_id (str):
                user_agent (str): defaults to "wyze_android_2.19.14", must be one of ["wyze_android_2.19.14"]
                x_api_key (str): defaults to "WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ", must be one of ["WMXHYf79Nr5gIlt3r0r7p9Tcw5bvs6BB4U8O8nGJ"]
                mfa_phone_type (str): defaults to "Primary", must be one of ["Primary"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2001
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['phone_id'] = \
                phone_id
            kwargs['user_agent'] = \
                user_agent
            kwargs['x_api_key'] = \
                x_api_key
            kwargs['mfa_phone_type'] = \
                mfa_phone_type
            kwargs['session_id'] = \
                session_id
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_login_send_sms_code_post = Endpoint(
            settings={
                'response_type': (InlineResponse2001,),
                'auth': [],
                'endpoint_path': '/user/login/sendSmsCode',
                'operation_id': 'user_login_send_sms_code_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'phone_id',
                    'user_agent',
                    'x_api_key',
                    'mfa_phone_type',
                    'session_id',
                    'user_id',
                ],
                'required': [
                    'phone_id',
                    'user_agent',
                    'x_api_key',
                    'mfa_phone_type',
                    'session_id',
                    'user_id',
                ],
                'nullable': [
                    'session_id',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'phone_id':
                        (str,),
                    'user_agent':
                        (str,),
                    'x_api_key':
                        (str,),
                    'mfa_phone_type':
                        (str,),
                    'session_id':
                        (str, none_type,),
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'phone_id': 'Phone-Id',
                    'user_agent': 'User-Agent',
                    'x_api_key': 'X-API-Key',
                    'mfa_phone_type': 'mfaPhoneType',
                    'session_id': 'sessionId',
                    'user_id': 'userId',
                },
                'location_map': {
                    'phone_id': 'header',
                    'user_agent': 'header',
                    'x_api_key': 'header',
                    'mfa_phone_type': 'form',
                    'session_id': 'form',
                    'user_id': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__user_login_send_sms_code_post
        )
